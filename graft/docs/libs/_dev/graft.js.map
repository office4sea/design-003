{"version":3,"file":"graft.js","mappings":"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","sources":["webpack://graft/./src/GraftBridge.js","webpack://graft/./src/GraftHtml.js","webpack://graft/./src/GraftHtmlTag.js","webpack://graft/./src/GraftLog.js","webpack://graft/./src/GraftSuspend.js","webpack://graft/./src/GraftUtils.js","webpack://graft/webpack/bootstrap","webpack://graft/./src/Graft.js"],"sourcesContent":["/**\r\n * {@link GraftBridge}<br>\r\n * 네이티브와 웹 매체간의 주고 받는 메시지 구조체 입니다.<br/>\r\n * @memberOf GraftBridge\r\n * @typedef {object} message\r\n * @property {string} trid 웹에서 채번된 거래번호로 웹에서는 직접 사용하지 않음\r\n * @property {string=} command 네이트브로 전달 할 기능 명령어\r\n * @property {object=} payload 네이트브로 전달 할 파라미터\r\n * @property {object=} receive 네이트브에서 받은 결과\r\n * @example\r\n * // Web에서 네이트브로 전달된 메시지 구조\r\n * // 네이티브에서 수행할 기능을 command를 이용하여 호출 하며,\r\n * // 전달할 인자가 있는 경우 payload를 사용 합니다.\r\n * {\r\n *     trid: 'w112233',\r\n *     command: 'cmd_sample',\r\n *     payload: {}\r\n * }\r\n * \r\n * // 네이트브에서 Web으로 응답할 결과 메시지 구조\r\n * // 웹으로 부터 받은 command 수행 후,\r\n * // Graft.postMessage 메소드를 이용하여 수행 완료 처리 합니다.\r\n * // 수행완료 시 웹으로 부터 받은 trid와 receive를 조합하여 인자로 전달 합니다.\r\n * Graft.postMessage({\r\n *     trid: 'w112233',\r\n *     receive: {}\r\n * });\r\n */\r\nconst _msgMap= {\r\n    self: new Map,\r\n    getTrid(trigger) {\r\n        const trid= 'w'+ (new Date().getTime()+ this.self.size);\r\n        this.self.set(trid, trigger);\r\n        return trid;\r\n    },\r\n    getTrigger(trid) {\r\n        const trigger= this.self.get(trid);\r\n        this.self.delete(trid);\r\n        return trigger|| {};\r\n    }\r\n};\r\nconst _native= {\r\n    self: undefined,\r\n    useNative() { return !!this.self },\r\n    postNative(msg) {\r\n        const message= JSON.stringify(Object.assign({payload: {}}, msg));\r\n        this.self.postMessage(message);\r\n    },\r\n};\r\nconst _mock= new Map;\r\n\r\n\r\n/**\r\n * 네이티브와 메시지를 주고 받는 역할을 합니다.\r\n * @namespace GraftBridge\r\n * @property {function} setNative `()=> any`<br/>\r\n * 네이티브 객체를 세팅합니다.<br/>\r\n * 👉 {@link GraftBridge.setNative}\r\n * @property {function} postMessage `()=> any`<br/>\r\n * 네이티브에 메시지를 전달 합니다.<br/>\r\n * 👉 {@link GraftBridge.postMessage}\r\n * @property {object} mock 네이티브 목객체.<br/>\r\n * 👉 {@link GraftBridge.mock}\r\n */\r\nmodule.exports= _graft=> {\r\n    /**\r\n     * {@link GraftBridge}<br>\r\n     * 네이티브 객체를 세팅합니다.\r\n     * @memberOf GraftBridge\r\n     * @typedef {function} setNative\r\n     * @returns {any}\r\n     * @example\r\n     * graft.bridge.setNative(_=> {\r\n     *     const nativeName= '네이티브 객체 이름';\r\n     *     // IOS\r\n     *     if(window.webkit) {\r\n     *         return window.webkit.messageHandlers[nativeName];\r\n     *     }\r\n     *     // AOS\r\n     *     if(window[nativeName]) {\r\n     *         return window[nativeName];\r\n     *     }\r\n     * });\r\n     */\r\n    const setNative= fun=> Object.assign(_native, {self: fun? fun(): undefined});\r\n    /**\r\n     * {@link GraftBridge}<br>\r\n     * 네이티브에 메시지를 전달 합니다.\r\n     * @memberOf GraftBridge\r\n     * @typedef {function} postMessage\r\n     * @param {GraftBridge.message} msg 메시지 객체\r\n     * @returns {Promise<any>} 메시지의 receive값\r\n     * @example\r\n     * // 네이티브 기능 요청 메시지 전달\r\n     * graft.bridge.postMessage({\r\n     *     command: 'cmd_sample',\r\n     *     payload: {xxx: 1}\r\n     * })\r\n     * .then(receive=> {\r\n     *     graft.log.out('요청 결과', receive);\r\n     * });\r\n     */\r\n    const postMessage= msg=> {\r\n        if(!_native.useNative()) return Promise.reject('네이트브 객체가 연결되어 있지 않습니다.');\r\n\r\n        return new Promise((resolve, reject)=> {\r\n            const trid= _msgMap.getTrid({resolve, reject});\r\n            _native.postNative(Object.assign(msg, {trid}));\r\n        });\r\n    };\r\n    const receiveMessage= msg=> {\r\n        if(!msg || !msg.trid) return console.error('메시지를 확인 하세요. \"trid\"는 필수 입니다.', new Error);\r\n\r\n        _msgMap.getTrigger(msg.trid).resolve(msg.receive);\r\n    };\r\n    /**\r\n     * {@link GraftBridge}<br>\r\n     * 네이티브에 메시지를 전달 합니다.\r\n     * @memberOf GraftBridge\r\n     * @typedef {object} mock\r\n     * @property {function} set `(command: string, proc: (msg: {@link GraftBridge.message})=> void)=> void`<br/>\r\n     * 네이티브 기능을 대신할 명령어를 세팅 합니다.\r\n     * @example\r\n     * // 네이티브 기능 모깅 처리\r\n     * graft.bridge.mock.set('cmd_sample', msg=> {\r\n     *     // 아래 postMessage로 전달한 메시지\r\n     *     graft.log.out('bridge.mock::cmd_sample', msg);\r\n     * \r\n     *     // 요청에 대한 결과 반환값\r\n     *     msg.receive= {\r\n     *         message: '네이티브 처리 결과 입니다.'\r\n     *     };\r\n     * \r\n     *     // 네이티브 수신 메소드를 호출 하여\r\n     *     // 브릿지를 호출 한 쪽에 트리거 될 수 있도록 한다.\r\n     *     Graft.postMessage(msg);\r\n     * });\r\n     * \r\n     * graft.exec(_=> {\r\n     *     // 네이티브 기능 요청 메시지 전달\r\n     *     graft.bridge.postMessage({\r\n     *         command: 'cmd_sample',\r\n     *         payload: {xxx: 1}\r\n     *     })\r\n     *     .then(receive=> {\r\n     *         graft.log.out('요청 결과', receive);\r\n     *     });\r\n     * });\r\n     */\r\n    const mock= {\r\n        set(command, proc) {\r\n            if(_mock.has(command)) return console.warn('이미 세팅된 기능 입니다.', new Error);\r\n\r\n            _mock.set(command, proc);\r\n        },\r\n        postMessage(msg) {\r\n            if(!msg) return console.error('메시지를 확인 하세요.', new Error);\r\n\r\n            const message= JSON.parse(msg);\r\n            if(!message.command) return console.error('메시지를 확인 하세요. \"command\"는 필수 입력입니다.', new Error);\r\n\r\n            const mock= _mock.get(message.command);\r\n            mock&& mock(message);\r\n        }\r\n    };\r\n    return {mock, setNative, postMessage, receiveMessage};\r\n};\r\n","/**\r\n * {@link GraftElement}<br>\r\n * 엘리먼트를 핸들링 할 수 있는 기능 묶음 입니다.\r\n * @memberOf GraftElement\r\n * @typedef {object} lot\r\n * @property {any} data 사용자 정의 데이터를 저장 합니다.\r\n * @property {string} text 엘리먼트의 TEXT 입/출력을 처리 합니다.<br/>\r\n * 👉 {@link GraftElement.lotText}\r\n * @property {string} html 엘리먼트의 HTML 마크업을 랜더링을 처리 합니다.<br/>\r\n * 👉 {@link GraftElement.lotHtml}\r\n * @property {string| Array<string>} value 입력 컨트롤의 value 값을 처리 합니다.\r\n * 체크박스 인경우 동일 이름(`name`) 속성의 값(`value`)을 배열로 반환 합니다.<br/>\r\n * 👉 {@link GraftElement.lotValue}\r\n * @property {object} css 엘리먼트의 클래스를 관리 합니다.<br/>\r\n * 👉 {@link GraftElement.lotCss}\r\n * @property {function} insert `(chile: {@link GraftElement})=> {@link GraftElement}`<br/>\r\n * 엘리먼트(child) 객체를 삽입 합니다.<br/>\r\n * 👉 {@link GraftElement.lotInsert}\r\n * @property {function} truncate `()=> {@link GraftElement.lot}`<br/>\r\n * 엘리먼트를 비웁니다.<br/>\r\n * 👉 {@link GraftElement.lotTruncate}\r\n * @property {function} event `(type: string, listener: (e: Event)=> any)=> void`<br/>\r\n * 이벤트를 등록 합니다.<br/>\r\n * 👉 {@link GraftElement.lotEvent}\r\n * @property {function} removeEvent `(type: string)=> void`<br/>\r\n * 등록된 이벤트를 삭제 합니다.<br/>\r\n * 👉 {@link GraftElement.lotRemoveEvent}\r\n * @property {function} dataBind `()=> {@link GraftElement.lotDataBindMap}`<br/>\r\n * `data-bind` 지시자로 등록된 객체를 반환 합니다.<br/>\r\n * 👉 {@link GraftElement.lotDataBind}\r\n */\r\nconst getGraftLot= (graft, el)=> {\r\n    /**\r\n     * 엘리먼트 객체(HTMLElement)와 엘리먼트의 핸들링 객체({@link GraftElementLot})의 믹스된 객체 입니다.\r\n     * @namespace GraftElement\r\n     * @property {GraftElement.lot} lot 엘리먼트를 핸들링 할 수 있는 기능 묶음 입니다.\r\n     */\r\n    const lot= {\r\n        // 이벤트 리스터 콜렉터\r\n        _eventMap: new Map,\r\n    };\r\n\r\n    Object.defineProperty(lot, 'text', _lotText(el));\r\n    Object.defineProperty(lot, 'html', _lotHtml(el));\r\n    Object.defineProperty(lot, 'value', _lotValue(el));\r\n    lot.data= undefined;\r\n    lot.css= _lotCss(el);\r\n    lot.insert= (chile, reference)=> _lotInsert(chile, reference, el);\r\n    lot.truncate= _=> _lotTruncate(el, lot);\r\n    lot.event= (type, listener)=> _lotEvent(type, listener, el, lot, graft);\r\n    lot.removeEvent= type=> _lotRemoveEvent(type, el, lot);\r\n    lot.dataBind= _=> _dataBind(el, graft);\r\n\r\n    return lot;\r\n};\r\n/**\r\n * {@link GraftElement}<br>\r\n * `()=> {@link GraftElement.lotDataBindMap}`<br/>\r\n * `data-bind` 지시자로 등록된 객체를 반환 합니다.\r\n * @memberOf GraftElement\r\n * @typedef {function} lotDataBind\r\n * @example\r\n * // <div class=\"form\">\r\n * //   <input data-bind=\"input\" type=\"text\">\r\n * //   <button data-bind=\"submit\" class=\"btn\">확인</button>\r\n * //   <div data-bind=\"output\" class=\"txtBox\"></div>\r\n * // </div>\r\n * const form= graft.tag.div(_it=> {\r\n *     // 바인딩된 엘리먼트를 반환 받음\r\n *     const vo= _it.lot.dataBind();\r\n * \r\n *     // 버튼 클릭 이벤트 등록\r\n *     vo.submit.lot.event('click', e=> {\r\n *         // input의 입력값을 output에 출력\r\n *         vo.output.lot.text= vo.input.lot.value;\r\n *     });\r\n * }, {class:'form'}, [\r\n *     graft.tag.input({dataBind:'input', type:'text'}),\r\n *     graft.tag.button('확인', {dataBind:'submit', class:'btn'}),\r\n *     graft.tag.div({dataBind:'output', class:'txtBox'}),\r\n * ]);\r\n */\r\nconst _dataBind= (el, {log})=> {\r\n    const vo= [...el.querySelectorAll('[data-bind]')]\r\n    .reduce((vo, _el)=> {\r\n        const {dataset:{bind}}= _el;\r\n        return vo[bind]? vo: Object.assign(vo, {[bind]: _el});\r\n    }, {});\r\n\r\n    /**\r\n     * {@link GraftElement}<br>\r\n     * `data-bind` 지시자로 등록된 엘리먼트 콜렉션 객체\r\n     * @memberOf GraftElement\r\n     * @typedef {object} lotDataBindMap\r\n     * @property {function} setText `(vl: Object<string, string>)=> void`<br/>\r\n     * 해당 엘리먼트의 TEXT를 변경 합니다.\r\n     * @property {function} getText `()=> Object<string, string>`<br/>\r\n     * 엘리먼트의 TEXT를 {key: value} 형태의 객체로 반환 합니다.\r\n     * @property {function} setHtml `(vl: Object<string, string>)=> void`<br/>\r\n     * 해당 엘리먼트의 HTML 마크업을 변경 합니다.\r\n     * @property {function} getHtml `()=> Object<string, string>`<br/>\r\n     * 엘리먼트의 HTML를 {key: value} 형태의 객체로 반환 합니다.\r\n     * @property {function} setValue `(vl: Object<string, string | Array<string>>)=> void`<br/>\r\n     * 해당 엘리먼트의 VALUE를 변경 합니다.\r\n     * @property {function} getValue `()=> Object<string, string | Array<string>>`<br/>\r\n     * 엘리먼트의 VALUE를 {key: value} 형태의 객체로 반환 합니다.\r\n     * @example\r\n     * graft.tag.div(_it=> {\r\n     *     // 바인딩된 엘리먼트를 반환 받음\r\n     *     const vo= _it.lot.dataBind();\r\n     * \r\n     *     // Text 변경 및 취득\r\n     *     vo.setText({...});\r\n     *     const text= vo.getText();\r\n     * });\r\n     */\r\n    const binder= Object.create(vo);\r\n    binder.setText= vl=> {\r\n        if(typeof vl != 'object') {\r\n            return log.debug('입력값을 객체로 전달 해주세요.', new Error);\r\n        }\r\n\r\n        Object.entries(vl).forEach(([ky, text])=> {\r\n            vo[ky]&& Object.assign(vo[ky].lot, {text});\r\n        });\r\n    };\r\n    binder.getText= _=> {\r\n        return Object.entries(vo).reduce((result, [ky, el])=> {\r\n            return Object.assign(result, {[ky]: el.lot.text});\r\n        }, {});\r\n    };\r\n    binder.setHtml= vl=> {\r\n        if(typeof vl != 'object') {\r\n            return log.debug('입력값을 객체로 전달 해주세요.', new Error);\r\n        }\r\n\r\n        Object.entries(vl).forEach(([ky, html])=> {\r\n            vo[ky]&& Object.assign(vo[ky].lot, {html});\r\n        });\r\n    };\r\n    binder.getHtml= _=> {\r\n        return Object.entries(vo).reduce((result, [ky, el])=> {\r\n            return Object.assign(result, {[ky]: el.lot.html});\r\n        }, {});\r\n    };\r\n    binder.setValue= vl=> {\r\n        if(typeof vl != 'object') {\r\n            return log.debug('입력값을 객체로 전달 해주세요.', new Error);\r\n        }\r\n\r\n        Object.entries(vl).forEach(([ky, value])=> {\r\n            vo[ky]&& Object.assign(vo[ky].lot, {value});\r\n        });\r\n    };\r\n    binder.getValue= _=> {\r\n        return Object.entries(vo).reduce((result, [ky, el])=> {\r\n            return Object.assign(result, {[ky]: el.lot.value});\r\n        }, {});\r\n    };\r\n\r\n    return binder;\r\n};\r\n/**\r\n * {@link GraftElement}<br>\r\n * `(type: string)=> void`<br/>\r\n * 등록된 이벤트를 삭제 합니다.\r\n * @memberOf GraftElement\r\n * @typedef {function} lotRemoveEvent\r\n * @param {string} type 이벤트 타입\r\n * @example\r\n * const submit= graft.tag.button('submit');\r\n * \r\n * // 클릭 이벤트 등록\r\n * submit.lot.event('click', e=> {\r\n *     graft.log.out('버튼클릭');\r\n * });\r\n * // 클릭 이벤트 등록\r\n * submit.lot.event('click.xxx', e=> {\r\n *     // 클릭 이벤트 제거\r\n *     submit.log.removeEvent('click');\r\n * });\r\n */\r\nconst _lotRemoveEvent= (typeFlag, el, {_eventMap})=> {\r\n    if(!_eventMap.has(typeFlag)) return;\r\n\r\n    const [type]= typeFlag.split('.');\r\n    if(!type) return;\r\n\r\n    el.removeEventListener(type, _eventMap.get(typeFlag));\r\n    _eventMap.delete(typeFlag);\r\n};\r\n/**\r\n * {@link GraftElement}<br>\r\n * `(type: string, listener: (e: Event)=> any)=> void`<br/>\r\n * 이벤트를 등록 합니다.\r\n * @memberOf GraftElement\r\n * @typedef {function} lotEvent\r\n * @param {string} typeFlag 이벤트 타입\r\n * @param {function} listener `(e: Event)=> any`<br/>\r\n * 이벤트 리스너(콜백 함수)\r\n * @example\r\n * const submit= graft.tag.button('submit');\r\n * \r\n * // 클릭 이벤트 등록\r\n * submit.lot.event('click', e=> {\r\n *     graft.log.out('버튼클릭');\r\n * });\r\n * // 클릭 이벤트 등록\r\n * submit.lot.event('click.xxx', e=> {\r\n *     // 클릭 이벤트 제거\r\n *     submit.log.removeEvent('click');\r\n * });\r\n */\r\nconst _lotEvent= (typeFlag, listener, el, {_eventMap}, {log})=> {\r\n    if(_eventMap.has(typeFlag)) return log.debug(`중복 등록된 이벤트(${typeFlag}) 입니다.`, new Error);\r\n\r\n    const [type]= typeFlag.split('.');\r\n    if(!type) return;\r\n\r\n    el.addEventListener(type, listener);\r\n    _eventMap.set(typeFlag, listener);\r\n};\r\n/**\r\n * {@link GraftElement}<br>\r\n * `()=> {@link GraftElement.lot}`<br/>\r\n * 엘리먼트를 비웁니다.\r\n * @memberOf GraftElement\r\n * @typedef {function} lotTruncate\r\n * @example\r\n * const div= graft.tag.div('xxx');\r\n * div.lot.truncate();\r\n */\r\nconst _lotTruncate= (el, lot)=> {\r\n    el.innerHTML= '';\r\n    return lot;\r\n};\r\n/**\r\n * {@link GraftElement}<br>\r\n * 엘리먼트 객체를 삽입 합니다.\r\n * @memberOf GraftElement\r\n * @typedef {function} lotInsert\r\n * @param {GraftElement} chile 삽입 할 엘리먼트 객체\r\n * @param {GraftElement=} reference 전달한 엘리먼트 앞에 삽입\r\n * @returns {GraftElement}\r\n * @example\r\n * // <div>xxx</div>\r\n * const div= graft.tag.div('xxx');\r\n * \r\n * // 엘리먼트 삽입\r\n * // <div>xxx<div>yyy</div></div>\r\n * div.lot.insert(graft.tag.div('yyy'));\r\n */\r\nconst _lotInsert= (child, reference, target)=> {\r\n    if(reference) return target.insertBefore(child, reference);\r\n    else {\r\n        return target.appendChild(child);\r\n    }\r\n};\r\n/**\r\n * {@link GraftElement}<br>\r\n * 엘리먼트의 클래스를 관리 합니다.\r\n * @memberOf GraftElement\r\n * @typedef {object} lotCss\r\n * @property {function} has `(name: string)=> boolean`<br/>\r\n * 클래스가 존재 하는지 검색 합니다.\r\n * @property {function} add `(name: string | Array<string>)=> {@link GraftElement.lotCss}`<br/>\r\n * 클래스를 추가 합니다. 다건인 경우 배열로 전달 합니다.\r\n * @property {function} remove `(name: string | Array<string>)=> {@link GraftElement.lotCss}`<br/>\r\n * 클래스를 삭제 합니다. 다건인 경우 배열로 전달 합니다.\r\n * @example\r\n * const btnToggle= graft.tag.button('btnToggle', {class: 'active'});\r\n * \r\n * btnToggle.lot.event('click', e=> {\r\n *     const css= btnToggle.lot.css;\r\n * \r\n *     // 클래스명 조회하여 토글 기능 구현\r\n *     if(css.has('active')) css.add('active');\r\n *     else {\r\n *         css.remove('active');\r\n *     }\r\n * });\r\n */\r\nconst _lotCss= el=> {\r\n    const {classList}= el;\r\n    return {\r\n        has(name) { return classList.contains(name) },\r\n        remove(name) {\r\n            _toArray(name).forEach(name=> classList.remove(name));\r\n            return this;\r\n        },\r\n        add(name) {\r\n            _toArray(name).forEach(name=> classList.add(name));\r\n            return this;\r\n        }\r\n    };\r\n};\r\n/**\r\n * {@link GraftElement}<br>\r\n * 입력 컨트롤의 value 값을 처리 합니다.</br>\r\n * 체크박스 인경우 동일 이름(`name`) 속성의 값(`value`)을 배열로 반환 합니다.\r\n * @memberOf GraftElement\r\n * @typedef {string| Array<string>} lotValue\r\n * @example\r\n * // <input type=\"text\" value=\"xxx\">\r\n * const input= graft.tag.input({type:'text', value:'xxx'});\r\n * // 출력값: xxx\r\n * graft.log.out('value: ', div.lot.value);\r\n * // <input type=\"text\" value=\"yyy\">\r\n * input.lot.value= 'yyy';\r\n * \r\n * // 체크박스 처리\r\n * const check1= graft.tag.input({type:'checkbox', name:'check', value:'xxx', checked:'checked'});\r\n * const check2= graft.tag.input({type:'checkbox', name:'check', value:'yyy', checked:'checked'});\r\n * const form= graft.tag.div([\r\n *     check1, check2,\r\n * ]);\r\n * \r\n * // 출력값: ['xxx', 'yyy']\r\n * graft.log.out('value: ', check1.lot.value);\r\n * // value=\"yyy\"의 체크박스만 선택됨\r\n * check1.lot.value= ['yyy'];\r\n */\r\nconst _lotValue= el=> {\r\n    return {\r\n        get() {\r\n            const {value, type}= el;\r\n            if(value == undefined) return '';\r\n\r\n            if(!/checkbox|radio/i.test(type)) return value;\r\n            else {\r\n                const result= _getCheckedElement(el, true).map(el=> el.value);\r\n                return /checkbox/i.test(type)? result: result.join('');\r\n            }\r\n        },\r\n        set(vl) {\r\n            const {value, type}= el;\r\n            if(value == undefined) return;\r\n\r\n            if(!/checkbox|radio/i.test(type)) el.innerHTML= vl;\r\n            else {\r\n                const values= _toArray(vl);\r\n                _getCheckedElement(el).forEach(el=> el.checked= values.includes(el.value));\r\n            }\r\n        },\r\n    };\r\n};\r\n/**\r\n * {@link GraftElement}<br>\r\n * 엘리먼트의 HTML 마크업을 랜더링 처리 합니다.\r\n * @memberOf GraftElement\r\n * @typedef {string} lotHtml\r\n * @example\r\n * // <div><strong>xxx</strong></div>\r\n * const div= graft.tag.div([\r\n *     graft.tag.strong('xxx'),\r\n * ]);\r\n * // 출력값: <strong>xxx</strong>\r\n * graft.log.out('html: ', div.lot.html);\r\n * // <div><p>yyy</p></div>\r\n * div.lot.html= '<p>yyy</p>';\r\n */\r\nconst _lotHtml= el=> {\r\n    return {\r\n        get() { return el.innerHTML },\r\n        set(vl) { el.innerHTML= vl },\r\n    };\r\n};\r\n/**\r\n * {@link GraftElement}<br>\r\n * 엘리먼트의 TEXT 입/출력을 처리 합니다.\r\n * @memberOf GraftElement\r\n * @typedef {string} lotText\r\n * @example\r\n * // <div>xxx</div>\r\n * const div= graft.tag.div('xxx');\r\n * // 출력값: xxx\r\n * graft.log.out('text: ', div.lot.text);\r\n * // <div>yyy</div>\r\n * div.lot.text= 'yyy';\r\n */\r\nconst _lotText= el=> {\r\n    return {\r\n        get() { return el.textContent },\r\n        set(vl) { el.textContent= vl },\r\n    };\r\n};\r\nconst _toArray= v=> (Array.isArray(v)? v: [v]);\r\nconst _getCheckedElement= (el, isChecked)=> {\r\n    const {name}= el;\r\n    if(name) return [...document.querySelectorAll(`input[name=${name}]${isChecked? ':checked': ''}`)];\r\n    else {\r\n        return el.checked? [el]: [];\r\n    }\r\n};\r\n\r\n/**\r\n * HTML 도큐먼트를 관리 합니다.\r\n * @namespace GraftHtml\r\n * @property {function} grafting `(el: HTMLElement)=> {@link GraftElement}`<br/>\r\n * 엘리먼트와 핸들링 객체를 믹스인 합니다.<br/>\r\n * 👉 {@link GraftHtml.grafting}\r\n * @property {function} insert `(chile: {@link GraftElement}, reference?: {@link GraftElement})=> {@link GraftElement}`<br/>\r\n * 도큐먼트 body에 엘리먼트를 삽입 합니다.<br/>\r\n * 👉 {@link GraftHtml.insert}\r\n * @property {function} query `(selector: string, target?: {@link GraftElement})=> {@link GraftElement}`<br/>\r\n * 선택자와 일치 하는 첫번째 엘리먼트를 반환 합니다.<br/>\r\n * 👉 {@link GraftHtml.query}\r\n * @property {function} queryAll `(selector: string, target?: {@link GraftElement})=> Array<{@link GraftElement}>`<br/>\r\n * 선택자와 일치 하는 모든 엘리먼트를 배열로 반환 합니다.<br/>\r\n * 👉 {@link GraftHtml.queryAll}\r\n */\r\nmodule.exports= graft=> {\r\n    /**\r\n     * {@link GraftHtml}<br>\r\n     * 엘리먼트와 핸들링 객체를 믹스인 합니다.\r\n     * @memberOf GraftHtml\r\n     * @typedef {function} grafting\r\n     * @param {HTMLElement} el 믹스인 대상 엘리먼트\r\n     * @returns {GraftElement}\r\n     */\r\n    const grafting= el=> {\r\n        if(el.lot) return el;\r\n\r\n        const lot= getGraftLot(graft, el);\r\n        return Object.assign(el, {lot});\r\n    };\r\n    /**\r\n     * {@link GraftHtml}<br>\r\n     * 도큐먼트 body에 엘리먼트를 삽입 합니다.\r\n     * @memberOf GraftHtml\r\n     * @typedef {function} insert\r\n     * @param {GraftElement} chile 삽입 할 엘리먼트 객체\r\n     * @param {GraftElement=} reference 전달한 엘리먼트 앞에 삽입\r\n     * @returns {GraftElement}\r\n     * @example\r\n     * // <div>\r\n     * //   <header></header>\r\n     * //   <main></main>\r\n     * // </div>\r\n     * const main= graft.html.insert(graft.el.main());\r\n     * graft.html.insert(graft.el.header(), main);\r\n     */\r\n    const insert= (child, reference)=> _lotInsert(child, reference, document.body);\r\n\r\n    const query= (selector, target=document)=> {\r\n        return target.querySelector(selector);\r\n    };\r\n    const queryAll= (selector, target=document)=> {\r\n        return [...target.querySelectorAll(selector)];\r\n    };\r\n    return {grafting, insert, query, queryAll};\r\n};\r\n","const tags= [\r\n    'a','abbr','address','area','article','aside','audio',\r\n    'b','base','bdi','bdo','blockquote','body','br','button',\r\n    'canvas','caption','cite','code','col','colgroup',\r\n    'data','datalist','dd','del','details','dfn','dialog','div','dl','dt',\r\n    'em','embed',\r\n    'fieldset','figcaption','figure','footer','form',\r\n    'h1','h2','h3','h4','h5','h6','header','hr',\r\n    'i','iframe','img','input','ins',\r\n    'kbd',\r\n    'label','legend','li','link',\r\n    'main','map','mark','meta','meter',\r\n    'nav','noscript',\r\n    'object','ol','optgroup','option','output',\r\n    'p','param','picture','pre','progress',\r\n    'q','rp','rt','ruby',\r\n    's','samp','section','select','small','source','span','strong','sub','summary','sup','svg',\r\n    'table','tbody','td','template','textarea','tfoot','th','thead','time','title','tr','track',\r\n    'u','ul',\r\n    'var','video','wbr'\r\n];\r\nconst _bindMethod= (graft, tag, tagName)=> {\r\n    const {html, utils}= graft;\r\n\r\n    /**\r\n     * {@link GraftHtmlTag}<br/>\r\n     * 태그 이름에 해당 하는 엘리먼트를 생성하며,\r\n     * 전달 받은 매개변수의 타입에 별 다음과 같은 기능을 합니다.<br/>\r\n     * **string | number**: 엘리먼트의 HTML 마크업을 랜더링 합니다.<br/>\r\n     * **function**: 엘리먼트 생성 초기화 함수 입니다.<br/>\r\n     * **object**: 엘리먼트 속성을 세팅 합니다.<br/>\r\n     * **array**: 엘리먼트에 서브 엘리먼트를 추가 합니다.<br/>\r\n     * @memberOf GraftHtmlTag\r\n     * @typedef {function} tag\r\n     * @param {...any} args 타입별 기능<br/>\r\n     * **string | number**: 엘리먼트의 HTML 마크업을 랜더링 합니다.<br/>\r\n     * **function**: 엘리먼트 생성 초기화 함수 입니다.<br/>\r\n     * **object**: 엘리먼트 속성을 세팅 합니다.<br/>\r\n     * **array**: 엘리먼트에 서브 엘리먼트를 추가 합니다.<br/>\r\n     * @returns {GraftElement}\r\n     * @example\r\n     * // string | number: 엘리먼트의 HTML 마크업을 랜더링 합니다.\r\n     * // 생성된 HTML: <div><strong>text</strong></div>\r\n     * const div= graft.el.div('<strong>text</strong>');\r\n     * \r\n     * // function: 엘리먼트 생성 초기화 함수 입니다.\r\n     * // 생성된 HTML: <div>xxx</div>\r\n     * const div= graft.el.div(_it=> {\r\n     *     _it.lot.text= 'xxx';\r\n     * });\r\n     * \r\n     * // object: 엘리먼트 속성을 세팅 합니다. \r\n     * // 생성된 HTML: <div id=\"xx1\" data-bind=\"xx2\"></div>\r\n     * const div= graft.el.div({id:'xx1', dataBind:'xx2'});\r\n     * \r\n     * // array: 엘리먼트에 서브 엘리먼트를 추가 합니다.\r\n     * // 생성된 HTML: <ul><li>xxx</li><li>yyy</li></ul>\r\n     * const ul= graft.el.ul([\r\n     *     graft.el.li('xxx'),\r\n     *     graft.el.li('yyy'),\r\n     * ]);\r\n     */\r\n    tag[tagName]= (...args)=> {\r\n        const el= html.grafting(document.createElement(tagName));\r\n\r\n        let children;\r\n        args.forEach(arg=> {\r\n            switch(true) {\r\n            case typeof arg == 'string':\r\n            case typeof arg == 'number':\r\n                return Object.assign(el, {innerHTML: arg});\r\n            case typeof arg == 'function':\r\n                return setTimeout(_=> {\r\n                    Object.assign(arg, {getView() {return el}});\r\n                    arg(el);\r\n                }, 100);\r\n            case typeof arg == 'object':\r\n                if(Array.isArray(arg)) children= arg;\r\n                else {\r\n                    Object.entries(arg).forEach(([k, v])=> el.setAttribute(utils.kebabCase(k), v))\r\n                }\r\n                return;\r\n            }\r\n        });\r\n\r\n        // 서브 엘리먼트 추가\r\n        children&& children.forEach(_el=> el.appendChild(_el));\r\n        return el;\r\n    };\r\n};\r\n\r\n/**\r\n * 엘리먼트를 생성을 위한 메소드를 제공 합니다.<br/>\r\n * **메소드 형식**: `{[tagname: string]: (...args: any)=> {@link GraftElement}}`<br/>\r\n * 메소드명에 해당 하는 엘리먼트를 생성하며,\r\n * 메소드의 기능은 전달 받은 매개변수의 타입별로 구분 됩니다.\r\n * @namespace GraftHtmlTag\r\n * @property {function} a `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} area `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} article `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} audio `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} b `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} br `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} button `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} canvas `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} caption `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} code `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} col `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} colgroup `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} dd `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} div `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} dl `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} dt `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} em `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} embed `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} footer `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} form `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} h1 `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} h2 `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} h3 `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} h4 `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} h5 `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} h6 `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} header `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} hr `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} i `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} iframe `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} img `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} input `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} ins `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} label `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} li `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} link `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} main `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} map `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} meta `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} nav `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} object `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} ol `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} option `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} p `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} pre `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} section `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} select `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} small `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} span `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} strong `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} sub `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} summary `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} svg `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} table `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} tbody `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} td `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} template `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} textarea `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} tfoot `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} th `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} thead `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} tr `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} u `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} ul `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n * @property {function} video `(...args: any)=> {@link GraftElement}` <br/>👉 {@link GraftHtmlTag.tag}\r\n */\r\nmodule.exports= graft=> {\r\n    const tag= {};\r\n    tags.forEach(tagName=> _bindMethod(graft, tag, tagName));\r\n    return tag;\r\n};\r\n","/**\r\n * 로깅 처리를 관리 합니다.\r\n * @namespace GraftLog\r\n * @property {function} active `(level?:'debug')=> void`<br/>\r\n * 로그 출력을 활성화 합니다.<br/>\r\n * 👉 {@link GraftLog.active}\r\n * @property {function} debug `(...opt:any)=> void`<br/>\r\n * 디버그 로그를 출력 합니다.<br/>\r\n * 👉 {@link GraftLog.debug}\r\n * @property {function} out `(...opt:any)=> void`<br/>\r\n * 로그를 출력 합니다.<br/>\r\n * 👉 {@link GraftLog.out}\r\n * @property {function} getLogger `(label:string, color:string)=> (...opt:any)=> void`<br/>\r\n * 로거를 반환 합니다.<br/>\r\n * 👉 {@link GraftLog.getLogger}\r\n * @property {function} addDebugger `(url:string)=> void`<br/>\r\n * 브라우저용 디버거를 추가 합니다.<br/>\r\n * 👉 {@link GraftLog.addDebugger}\r\n */\r\nmodule.exports= graft=> {\r\n    const empty= _=>_;\r\n    const saveKey= `[graft-log]`;\r\n    const level= sessionStorage.getItem(saveKey);\r\n    const layout= 'padding:0 4px 0 4px; border-radius:2px; font-weight:bold; color:#fff;';\r\n\r\n    /**\r\n     * {@link GraftLog}<br>\r\n     * 로그 출력을 활성화 합니다.\r\n     * @memberOf GraftLog\r\n     * @typedef {function} active\r\n     * @param {'debug'=} level 'debug' 입력 시 debug 로그 출력\r\n     * @example\r\n     * // 로그 활성화\r\n     * graft.log.active();\r\n     * // debug 레벨 활성화\r\n     * graft.log.active('debug');\r\n     */\r\n    const active= level=> sessionStorage.setItem(saveKey, level);\r\n    /**\r\n     * {@link GraftLog}<br>\r\n     * 디버그 로그를 출력 합니다.\r\n     * @memberOf GraftLog\r\n     * @typedef {function} debug\r\n     * @param {...any} params 로그를 출력 할 값\r\n     * @example\r\n     * graft.log.debug('출력값');\r\n     */\r\n    const debug= _=> (level== 'debug')? console.log.bind(window, `%cdebug`, `${layout} background:#adb5bd;`) : empty;\r\n    /**\r\n     * {@link GraftLog}<br>\r\n     * 콘솔 로그를 출력 합니다.\r\n     * @memberOf GraftLog\r\n     * @typedef {function} out\r\n     * @param {...any} params 로그를 출력 할 값\r\n     * @example\r\n     * graft.log.out('출력값');\r\n     */\r\n    const out= _=> !!level? console.log.bind(window, `%cout`, `${layout} background:#6c757d;`): empty;\r\n    /**\r\n     * {@link GraftLog}<br>\r\n     * 콘솔 로그를 출력 합니다.\r\n     * @memberOf GraftLog\r\n     * @typedef {function} getLogger\r\n     * @param {string} label 출력 로그의 라벨\r\n     * @param {string=} color 라벨색('info' | 'primary' | 'danger')으로 다른 색으로 할경우 코드값을 직접 입력\r\n     * @example\r\n     * const logger= graft.log.getLogger('lavel text');\r\n     * logger(1, 2, 3);\r\n     */\r\n    const getLogger= (label, code='info')=> {\r\n        const color= {info:'#198754;', primary:'#0d6efd', danger:'#dc3545'}[code]|| code;\r\n        return !!level?\r\n        console.log.bind(window, `%c${label}`, `background:${color}; ${layout}`):\r\n        empty;\r\n    };\r\n    /**\r\n     * {@link GraftLog}<br>\r\n     * 브라우저용 디버거를 추가 합니다.\r\n     * @memberOf GraftLog\r\n     * @typedef {function} setDebugger\r\n     * @param {string} url 디버거 스크립트 경로\r\n     */\r\n    const setDebugger= ({isAdd, url}= {})=> {\r\n        if(!isAdd) return Promise.resolve();\r\n        else {\r\n            return Graft.import(url).then(_=> {\r\n                eruda.init(), Object.assign(result, {debug: debug(), out: out()});\r\n            });\r\n        }\r\n    };\r\n\r\n    const result= {\r\n        active, getLogger, setDebugger,\r\n        debug: debug(), out: out()\r\n    };\r\n    return result;\r\n};\r\n","const _triggers= new Map;\r\n\r\n/**\r\n * 프로세스 진행을 보류/관리 합니다. 프로세스의 진행 상태를 제어 및 제어권을 반환 하는 형태의 코루틴을 제공 합니다.\r\n * @namespace GraftSuspend\r\n * @property {function} has `(key: any)=> boolen`<br/>\r\n * 프로제스 제어자 등록 여부를 조회 합니다.<br/>\r\n * 👉 {@link GraftSuspend.has}\r\n * @property {function} run `(key: any, onInit?: ()=> void)=> Promise<any>`<br/>\r\n * 프로제스 제어자를 등록 및 실행 대기 합니다.<br/>\r\n * 👉 {@link GraftSuspend.run}\r\n * @property {function} resolve `(key: any, receive?: any)=> void`<br/>\r\n * 프로세스 실행 대기를 귀결 처리 합니다.<br/>\r\n * 👉 {@link GraftSuspend.resolve}\r\n * @property {function} reject `(key: any, reason?: any)=> void`<br/>\r\n * 프로세스 실행 대기를 거부 처리 합니다.<br/>\r\n * 👉 {@link GraftSuspend.reject}\r\n */\r\nmodule.exports= _graft=> {\r\n    /**\r\n     * {@link GraftSuspend}<br>\r\n     * 프로제스 제어자 등록 여부를 조회 합니다.\r\n     * @memberOf GraftSuspend\r\n     * @typedef {function} has\r\n     * @param {any} key 조회키\r\n     * @returns {boolean}\r\n     * @example\r\n     * // 등록 여부 조회\r\n     * const hasXXX= graft.suspend.has('xxx');\r\n     * if(hasXXX) graft.log.out('등록');\r\n     */\r\n    const has= ky=> _triggers.has(ky);\r\n    /**\r\n     * {@link GraftSuspend}<br>\r\n     * 프로세스 제어자를 등록 및 실행 대기 합니다.\r\n     * 프로세스의 등록 및 실행은 프로세스 제어자가\r\n     * 반환(귀결: {@link GraftSuspend.resolve} / 거부: {@link GraftSuspend.reject})되기 전까지 재등록 할 수 없습니다.\r\n     * @memberOf GraftSuspend\r\n     * @typedef {function} run\r\n     * @param {any} key 등록키\r\n     * @param {function=} onInit 수행 기능 필요시 기능을 구현 합니다.\r\n     * @returns {Promise<any>}\r\n     * @example\r\n     * // 코루틴 등록 및 프로세스 대기\r\n     * graft.suspend.run('xxx')\r\n     *      .then(receive=> {\r\n     *          // 코루틴 수행 귀결 처리 결과를 반환 받습니다.\r\n     *          graft.log.out('정상', receive);\r\n     *      })\r\n     *      .catch(reason=> {\r\n     *          // 코루틴 수행 거부 처리 결과를 반환 받습니다.\r\n     *          graft.log.out('오류', reason);\r\n     *      });\r\n     */\r\n    const run= (ky, proc)=> {\r\n        if(_triggers.has(ky)) {\r\n            console.warn('제어자가 중복 됩니다.', new Error);\r\n            return Promise.reject('제어자가 중복 됩니다.');\r\n        }\r\n\r\n        return new Promise((resolve, reject)=> {\r\n            _triggers.set(ky, {resolve, reject});\r\n            proc&& proc();\r\n        });\r\n    };\r\n    /**\r\n     * {@link GraftSuspend}<br>\r\n     * 프로세스 실행 대기를 귀결 처리 하며,\r\n     * {@link GraftSuspend.run}을 실행 대기중인 프로세스로 돌아 갑니다.\r\n     * @memberOf GraftSuspend\r\n     * @typedef {function} resolve\r\n     * @param {any} key 조회키\r\n     * @param {any=} receive 귀결 처리에 대한 반환값\r\n     * @example\r\n     * // 코루틴 정상 반환\r\n     * // run('xxx').then 메소드를 통해 반환 받습니다.\r\n     * graft.suspend.resolve('xxx', {});\r\n     */\r\n    const resolve= (ky, receive)=> {\r\n        const trigger= _triggers.get(ky);\r\n        if(trigger) {\r\n            _triggers.delete(ky);\r\n            trigger.resolve(receive);\r\n        }\r\n    };\r\n    /**\r\n     * {@link GraftSuspend}<br>\r\n     * 프로세스 실행 대기를 거부 처리 하며,\r\n     * {@link GraftSuspend.run}을 실행 대기중인 프로세스로 돌아 갑니다.\r\n     * @memberOf GraftSuspend\r\n     * @typedef {function} reject\r\n     * @param {any} key 조회키\r\n     * @param {any=} reason 거부 처리 사유\r\n     * @example\r\n     * // 코루틴 거부 반환\r\n     * // run('xxx').catch 메소드를 통해 반환 받습니다.\r\n     * graft.suspend.reject('xxx', {});\r\n     */\r\n    const reject= (ky, reason)=> {\r\n        const trigger= _triggers.get(ky);\r\n        if(trigger) {\r\n            _triggers.delete(ky);\r\n            trigger.reject(reason);\r\n        }\r\n    };\r\n\r\n    return {has, run, resolve, reject};\r\n};\r\n","const _upperToDash= (vl, replace)=> vl.replace(/([a-z0-9])([A-Z])/g, replace);\r\nconst _dashToUpper= vl=> {\r\n    if(!/[-_]/g.test(vl)) return vl;\r\n    else {\r\n        return vl.toLowerCase()\r\n        .replace(/([_-]\\w)/g, v => v[1].toUpperCase())\r\n        .replace(/_/g, '');\r\n    }\r\n};\r\n\r\n/**\r\n * 유틸리티\r\n * @namespace GraftUtils\r\n * @property {function} clone `(vl: any)=> any`<br/>\r\n * 값의 복사본을 반환 합니다.<br/>\r\n * 👉 {@link GraftUtils.clone}\r\n * @property {function} kebabCase `(vl: string, toUpper?: boolean)=> string`<br/>\r\n * 대상 문자열을 케밥(xxx-xxx) 케이스로 변환 합니다.<br/>\r\n * 👉 {@link GraftUtils.kebabCase}\r\n * @property {function} snakeCase `(vl: string, toUpper?: boolean)=> string`<br/>\r\n * 대상 문자열을 스네이크(xxx_xxx) 케이스로 변환 합니다.<br/>\r\n * 👉 {@link GraftUtils.snakeCase}\r\n * @property {function} camelCase `(vl: string)=> string`<br/>\r\n * 대상 문자열을 카멜(xxxXxx) 케이스로 변환 합니다.<br/>\r\n * 👉 {@link GraftUtils.camelCase}\r\n * @property {function} pascalCase `(vl: string)=> string`<br/>\r\n * 대상 문자열을 파스칼(XxxXxx) 케이스로 변환 합니다.<br/>\r\n * 👉 {@link GraftUtils.pascalCase}\r\n */\r\nmodule.exports= _graft=> {\r\n    /**\r\n     * {@link GraftUtils}<br>\r\n     * 카멜/파스칼 케이스를 케밥(xxx-xxx) 케이스로 변환 합니다.\r\n     * @memberOf GraftUtils\r\n     * @typedef {function} kebabCase\r\n     * @param {string} vl 변환 대상 문자열\r\n     * @param {boolean=} toUpper 대/소문자 구분으로 미입력시 소문자로 변환(기본값: false)\r\n     * @returns {string}\r\n     */\r\n    const kebabCase= (vl, toUpper=false)=> {\r\n        const result= _upperToDash(vl, '$1-$2');\r\n        return toUpper? result.toUpperCase(): result.toLowerCase();\r\n    };\r\n    /**\r\n     * {@link GraftUtils}<br>\r\n     * 카멜/파스칼 케이스를 스네이크(xxx_xxx) 케이스로 변환 합니다.\r\n     * @memberOf GraftUtils\r\n     * @typedef {function} snakeCase\r\n     * @param {string} vl 변환 대상 문자열\r\n     * @param {boolean=} toUpper 대/소문자 구분으로 미입력시 소문자로 변환(기본값: false)\r\n     * @returns {string}\r\n     */\r\n    const snakeCase= (vl, toUpper=false)=> {\r\n        const result= _upperToDash(vl, '$1_$2');\r\n        return toUpper? result.toUpperCase(): result.toLowerCase();\r\n    }\r\n    /**\r\n     * {@link GraftUtils}<br>\r\n     * 스네이크/케밥 케이스를 카멜(xxxXxx) 케이스로 변환 합니다.\r\n     * @memberOf GraftUtils\r\n     * @typedef {function} camelCase\r\n     * @param {string} vl 변환 대상 문자열\r\n     * @returns {string}\r\n     */\r\n    const camelCase= vl=> _dashToUpper(vl).replace(/^[\\w]/, v=> v.toLowerCase());\r\n    /**\r\n     * {@link GraftUtils}<br>\r\n     * 스네이크/케밥 케이스를 파스칼(XxxXxx) 케이스로 변환 합니다.\r\n     * @memberOf GraftUtils\r\n     * @typedef {function} pascalCase\r\n     * @param {string} vl 변환 대상 문자열\r\n     * @returns {string}\r\n     */\r\n    const pascalCase= vl=> _dashToUpper(vl).replace(/^[\\w]/, v=> v.toUpperCase());\r\n\r\n    /**\r\n     * {@link GraftUtils}<br>\r\n     * 값의 복사본을 반환 합니다.\r\n     * @memberOf GraftUtils\r\n     * @typedef {function} clone\r\n     * @param {any} vl \r\n     * @returns {any}\r\n     */\r\n    const clone= vl=> {\r\n        if(Array.isArray(vl)) return vl.slice(0);\r\n        if(typeof vl == 'object') return Object.assign({}, vl);\r\n        return vl;\r\n    };\r\n    return {\r\n        clone,\r\n        kebabCase, snakeCase, camelCase, pascalCase,\r\n    };\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const version= '1.0.0';\r\nconst graftLog= require('./GraftLog');\r\nconst graftUtils= require('./GraftUtils');\r\nconst graftHtml= require('./GraftHtml');\r\nconst graftTag= require('./GraftHtmlTag');\r\nconst graftSuspend= require('./GraftSuspend');\r\nconst graftBridge= require('./GraftBridge');\r\nconst _graft= {\r\n    self:undefined,\r\n    log:undefined, utils:undefined,\r\n    tag:undefined, html:undefined,\r\n\r\n    suspend:undefined, bridge:undefined,\r\n    ctrl:{}, view:{},\r\n};\r\n\r\n/**\r\n * DOM객체에 확장 된 기능을 이식 하여,\r\n * 바인딩된 컨트롤객체를 쉽게 핸들링 할 수 있는 라이브러리 입니다.\r\n * @property {GraftLog} log 로깅 처리를 관리 합니다.\r\n * @property {GraftUtils} utils 유틸리티 객체 입니다.\r\n * @property {GraftHtml} html HTML 도큐먼트를 관리 합니다.\r\n * @property {GraftHtmlTag} tag 엘리먼트를 생성합니다.\r\n * @property {GraftBridge} bridge 네이티브와 메시지를 주고 받는 역할을 합니다.\r\n * @property {GraftSuspend} suspend 프로세스 진행을 관리 하는 코루틴을 제공합니다.\r\n * @property {object} view `Object<string, {@link GraftElement}>`<br/>뷰 컬렉션\r\n * @property {object} ctrl `Object<string, (it: {@link GraftElement})=> void>`<br/>뷰 제어 함수 컬렉션\r\n */\r\nclass Graft {\r\n    /** Graft 생성자. 싱글톤으로 동작하며, {@link Graft.getInstance}를 통해 인스턴스를 제공 받습니다. */\r\n    constructor(proc) {\r\n        if(_graft.self) {\r\n            console.warn('이미 생성된 인스턴스 입니다.', new Error);\r\n            return _graft.self;\r\n        }\r\n\r\n        _graft.self= this;\r\n        _graft.log= graftLog(this);\r\n        _graft.utils= graftUtils(this);\r\n        _graft.suspend= graftSuspend(this);\r\n        _graft.bridge= graftBridge(this);\r\n        _graft.html= graftHtml(this);\r\n        _graft.tag= graftTag(this);\r\n\r\n        proc && proc(this);\r\n    }\r\n    static get version() { return version }\r\n    /**\r\n     * Graft 인스턴스를 반환 합니다.\r\n     * @param {function=} proc (self: {@link Graft})=> void<br/>\r\n     * 객체 생성시 호출 되는 함수, 매개변수로 생성된 객체의 인스턴스를 전달 합니다.\r\n     * @returns {Graft}\r\n     * @example\r\n     * const graft= Graft.getInstance(graft=> {\r\n     *     graft.isMobile= /android|iphone/i.test(navigator.userAgent);\r\n     *     graft.log.out('객체 초기화 및 환경 설정');\r\n     * });\r\n     */\r\n    static getInstance(proc) { return new Graft(proc) }\r\n    /**\r\n     * 자바스크립트 모듈을 추가 합니다.\r\n     * @param {string| Array<string>} url 스크립트 URL정보, 다건 추가시 배열로 입력\r\n     * @returns {Promise<void>}\r\n     * @example\r\n     * // xxx.js 로드 완료 후\r\n     * // yyy.js, zzz.js 추가\r\n     * Graft.import('xxx.js')\r\n     * .then(_=> Graft.import([\r\n     *     'yyy.js',\r\n     *     'zzz.js'\r\n     * ]));\r\n     */\r\n    static import(url) {\r\n        const now= new Date();\r\n        const urls= Array.isArray(url)? url : [url];\r\n\r\n        return Promise.all(urls.map(url=> _loadScript(url)))\r\n        .then(_=> new Promise(resolve=> {\r\n            requestAnimationFrame(_=> resolve());\r\n        }));\r\n\r\n        function _loadScript(url) {\r\n            const script= document.createElement('script');\r\n            return new Promise(resolve=> {\r\n                if(!url) return resolve();\r\n\r\n                script.src= `${url}${/\\?/.test(url)? '': `?${now.getTime()}`}`;\r\n                script.onload= _=> resolve();\r\n                script.onerror= _=> resolve(url);\r\n                document.head.appendChild(script);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 네이티브 부터 메시지를 수신 합니다.\r\n     * @param {GraftBridge.message} msg 메시지 구조체\r\n     */\r\n    static postMessage(msg) { _graft.bridge.receiveMessage(msg) }\r\n\r\n    get log() { return _graft.log }\r\n    get utils() { return _graft.utils }\r\n    get suspend() { return _graft.suspend }\r\n    get bridge() { return _graft.bridge }\r\n    get tag() { return _graft.tag }\r\n    get html() { return _graft.html }\r\n    get ctrl() {  return _graft.ctrl }\r\n    get view() {  return _graft.view }\r\n\r\n    /**\r\n     * 어플리케이션의 고유 프로세스를 진행 할 수 있는 기능을 제공 합니다.\r\n     * @param {function} proc (self: {@link Graft})=> void<br/>\r\n     * 수행 프로시저로 매개변수로 생성된 객체의 인스턴스를 전달 합니다.\r\n     * @example\r\n     * graft.exec(graft=> {\r\n     *     graft.log.out('프로세스 진행');\r\n     * });\r\n     */\r\n    exec(proc) {\r\n        if(typeof proc != 'function') {\r\n            throw '전달값을 확인 하세요.| 실행 프로시저가 존재하지 않거나 함수가 아닙니다.';\r\n        }\r\n        proc(this);\r\n    }\r\n    /**\r\n     * 설정 시간 동안 대기 후 생성된 인스턴스를 반환 합니다.\r\n     * @param {number=} wait 대기시간을 밀리초단위로 입력\r\n     * @returns {Promise<Graft>}\r\n     */\r\n    build(wait= 50) {\r\n        return new Promise(resolve=> {\r\n            setTimeout(_=> resolve(this), wait);\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * 확장기능\r\n * @namespace GraftExtends\r\n * @property {object} popup 팝업 호출을 관리 합니다.\r\n */\r\nwindow.Graft= Graft;\r\n"],"names":["_msgMap","self","Map","getTrid","trigger","trid","Date","getTime","this","size","set","getTrigger","get","delete","_native","undefined","useNative","postNative","msg","message","JSON","stringify","Object","assign","payload","postMessage","_mock","module","exports","_graft","mock","command","proc","has","console","warn","Error","error","parse","setNative","fun","Promise","resolve","reject","receiveMessage","receive","_lotInsert","child","reference","target","insertBefore","appendChild","_lotCss","el","classList","name","contains","remove","_toArray","forEach","add","v","Array","isArray","_getCheckedElement","isChecked","document","querySelectorAll","checked","graft","grafting","lot","_eventMap","defineProperty","textContent","vl","_lotText","innerHTML","_lotHtml","value","type","test","result","map","join","values","includes","_lotValue","data","css","insert","chile","truncate","_","_lotTruncate","event","listener","typeFlag","log","debug","split","addEventListener","_lotEvent","removeEvent","removeEventListener","_lotRemoveEvent","dataBind","vo","reduce","_el","dataset","bind","binder","create","setText","entries","ky","text","getText","setHtml","html","getHtml","setValue","getValue","_dataBind","getGraftLot","body","query","selector","querySelector","queryAll","tags","tag","tagName","utils","args","createElement","children","arg","setTimeout","getView","k","setAttribute","kebabCase","_bindMethod","empty","saveKey","level","sessionStorage","getItem","layout","window","out","active","setItem","getLogger","label","code","color","info","primary","danger","setDebugger","isAdd","url","Graft","import","then","eruda","init","_triggers","run","reason","_upperToDash","replace","_dashToUpper","toLowerCase","toUpperCase","clone","slice","toUpper","snakeCase","camelCase","pascalCase","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","graftLog","graftUtils","graftHtml","graftTag","graftSuspend","graftBridge","suspend","bridge","ctrl","view","constructor","version","getInstance","now","urls","all","script","src","onload","onerror","head","_loadScript","requestAnimationFrame","exec","build","wait"],"sourceRoot":""}